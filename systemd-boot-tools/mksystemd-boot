#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later


_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  build_date=""
  out_file=""
  syslinux_cfg=""
  plain_text=""
  auto_cfg=""
  cfg_checksum=""
  entry_name=""
  short_name=""
  arch_name=""
  boot_method=""
  install_dir=""
  mksystemd_boot_opts=()
  color=""
  quiet=""
}

_requirements() {
  local \
    _lib
  _lib="$( \
    _get_lib)"
  if [[ ! -d "${_lib}/systemd/boot" ]]; then
    _msg_error \
      "systemd-boot binaries directory not found!" \
      1
  fi
}

_get_script_dir() {
  realpath -- \
    "$( \
      dirname -- \
        "${BASH_SOURCE[0]}")"
}

_get_cfg_path() {
  local \
    _sys_path \
    _local_path \
    _path
  _sys_path="$( \
    _get_usr)/lib/$( \
      _get \
        "app" \
	"name")/configs"
  _local_path="$( \
    dirname \
      "$(_get_script_dir)")/configs"
  _path="${_sys_path}"
  [[ ! -e "${_sys_path}" ]] && \
    _msg_warning \
      "${_sys_path} not found" && \
    _path="$( \
      realpath \
        "${_local_path}" || \
	true)" && \
    [[ ! -e "${_path}" ]] && \
      _msg_warning \
        "${_path} not found" && \
      _msg_error \
        "Missing configurations" \
	1
  printf \
    "%s" \
    "${_path}"
}

_upper() {
  local \
    _string="${1}"
  echo \
    "${_string}" | \
    tr \
      '[:lower:]' \
      '[:upper:]'
}

_get_platform() {
  local \
    _boot_method="${1}" \
    _platform
  [[ "${_boot_method}" == "mbr" ]] && \
    _platform="pc"
  [[ "${_boot_method}" == "eltorito" ]] && \
    _platform="pc-eltorito"
  [[ "${_boot_method}" == "efi" ]] && \
    _platform="efi"
  [[ "${_boot_method}" == "qemu" ]] && \
    _platform="qemu"
  [[ "${_boot_method}" == "uboot" ]] && \
    _platform="qemu"
  echo \
    "${_platform}"
}

_get_arch() {
  local \
    _arch="${1}"
  [[ "${_arch}" == "armv7h" ]] ||
  [[ "${_arch}" == "arm" ]] ||
  [[ "${_arch}" == "armv6l" ]] && \
    _arch="arm"
  [[ "${_arch}" == "aarch64" ]]  && \
    _arch="arm64"
  echo \
    "${_arch}"
}

_out_file_name() {
  local \
    _arch="${1}" \
    _boot_method="${2}" \
    _CODE
  _CODE="${_arch}"
  [[ "${_arch}" == "i386" ]] && \
    _CODE="IA32"
  [[ "${_arch}" == "x86_64" ]] && \
    _CODE="x64"
  [[ "${_arch}" == "armv7h" ]] ||
  [[ "${_arch}" == "arm" ]] ||
  [[ "${_arch}" == "armv6l" ]] && \
    _CODE="ARM"
  [[ "${_arch}" == "aarch64" ]]  && \
    _CODE="ARM64"
  echo \
    "BOOT${_CODE}.$( \
      _upper \
        "${_boot_method}")"
}

_out_file_auto_detect() {
  pwd
}

# Install SYSLINUX in a directory
# $1: architecture (x86_64, i386)
# $2: platform (efi, pc)
# $3: output file or directory
#     default name: BOOT<IA32/X64>.EFI
_mksyslinux() {
  local \
  _boot_method="${1}" \
  _arch="${2}" \
  _cfg="${3}" \
  _out="${4}" \
  _options=() \
  _arch="$( \
    _get_arch \
      "${_arch}")"
  _options=(
    -O 
      "${_arch}-${_platform}"
    --modules="${_modules}"
    --locales="en@quot"
    --themes=""
    --sbat=/usr/share/grub/sbat.csv
    --disable-shim-lock
    --compress=xz
  )
  [[ "${_platform}" == "pc"* ]] && \
    _options+=(
      --install-modules="${_modules}"
      --fonts=""
    )
  _options+=(
    -o "${_out}")
  grub-mkstandalone \
    "${_options[@]}" \
    "boot/grub/grub.cfg=${_cfg}" \
    "${_ksum}" \
    "${_isum}"
}

_cfg_dir_auto_detect() {
  local \
    _tmp_dir \
    _mksystemd_bootcfg_opts=() \
    _loader \
    _entries
  _tmp_dir="$( \
    mktemp \
      -d)"
  _loader="${_tmp_dir}/loader.cfg"
  _entries="${_tmp_dir}/entries"
  if [[ "${quiet}" == "n" ]]; then
    _mksystemd_bootcfg_opts+=(
      -v
    )
  fi
  _mksystemd_bootcfg_opts+=(
    "${mksystemd_bootcfg_opts[@]}"
  )
  mksystemd-bootcfg \
    "${_mksystemd_bootcfg_opts[@]}" \
    "${_tmp_dir}"
  _set \
    "cfg" \
    "dir" \
    "${_tmp_dir}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  local \
    _embed_cfg=""
  _set_override \
    "build" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "out" \
    "file" \
    "$(_out_file_auto_detect)"
  _set_override \
    "entry" \
    "name" \
    "Arch Linux"
  _set_override \
    "short" \
    "name" \
    "arch"
  _set_override \
    "arch" \
    "name" \
    "$( \
      uname \
        -m)"
  _set_override \
    "boot" \
    "method" \
    "efi"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ "$(_get \
             "cfg" \
             "dir")" == "" ]]; then
    _cfg_dir_auto_detect
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
usage:
  $(_get "app" "name")
    [options]
    <out_file>

  options:
     -C <cfg_dir>         Whether to use a specific configuration
                          directory.
		          Default: '$(_get "cfg" "dir")'
     -g                   Pass to auto-generate a configuration
                          file using mksystemd-bootcfg.
                          Default: '$(_get "auto" "cfg")'
			  Default: '$(_get "plain" "text")'.
     -b <boot_method>     Boot method (mbr, eltorito, efi).
			  Default: '$(_get "boot" "method")'
     -a <arch_name>       Architecture ('aarch64', 'arm', 'armv7h',
                                        'armv6', 'i386', 'x86_64')
			  Default: '$(_get "arch" "name")'
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
  mksystemd-bootcfg options:
     -L <entry_name>      Sets an alternative entry name
			  Default: '$(_get "entry" "name")'
     -l <short_name>      Short entry name.
			  Default: '$(_get "short" "name")'
     -U <fsuuid>          Add an UUID for an encrypted boot disk.
     -u <fsuuid>          Add an UUID for an unencrypted boot disk.
     -K <kernel>          Add the path of a kernel inside a boot disk.
     -k <kernel_sum>      SHA256 sums of the kernel.
     -I <initrd>          Path of the initrd inside the
                          boot disks.
     -i <initrd_sum>      SHA256 sum of the initrd.
     -e <boot_key>        Path of the encryption key inside
                          the boot disk.
                          Set to "" for unencrypted disks.

  <out>         Output directory or systemd-boot binary path.
                Default: ./BOOT<arch_code>.<platform>
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info "                              ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _cfg
  _cfg="$( \
    _get \
      "cfg" \
      "dir")"
  _msg_info "${app_name} configuration"
  _msg_info "                       Build Date:   $(_get "build" "date")"
  _msg_info "                Configuration dir:   ${_cfg:-Auto}"
  _msg_info "                     Architecture:   $(_get "arch" "name")"
  _msg_info "                       Entry name:   $(_get "entry" "name")"
  _msg_info "                       Short name:   $(_get "short" "name")"
  _msg_info "                      Boot Method:   $(_get "boot" "method")"
  _msg_info "                      Output file:   $(_get "out" "file")"
  _msg_info " Configuration generation options:   ${mksystemd_boot_opts[@]}"
}

_globals
_global_variables

_requirements

# shellcheck disable=SC2034
while \
  getopts \
    'o:C:gb:a:cvh?' \
    arg; do
  case \
    "${arg}" in
    o) override_out_file="${OPTARG}" ;;
    C) override_cfg_dir="${OPTARG}" ;;
    g) override_auto_cfg="true" ;;
    b) override_boot_method="${OPTARG}" ;;
    a) override_arch_name="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
mksystemd_boot_opts=(
  "$@"
)
_set_overrides
out_file="$( \
  realpath \
    -q -- \
    "${out_file}")"
if [ -d "${out_file}" ]; then
  out_file="${out_file}/$( \
    _out_file_name \
      "$( \
        _get \
          "arch" \
          "name")" \
      "$( \
        _get \
          "boot" \
          "method")")"
fi
app_opts=(
  "$(_get \
      "boot" \
      "method")" \
  "$(_get \
      "arch" \
      "name")" \
  "$(_get \
      "grub" \
      "cfg")" \
  "$(_get \
      "out" \
      "directory")"
)
_show_config
_mksystemd_boot \
  "${app_opts[@]}"
